import{r as u,j as e}from"./index-i_XjV6bq.js";import{g as I}from"./index-CH_iu5NA.js";const c=[];for(let s=0;s<256;++s)c.push((s+256).toString(16).slice(1));function V(s,n=0){return(c[s[n+0]]+c[s[n+1]]+c[s[n+2]]+c[s[n+3]]+"-"+c[s[n+4]]+c[s[n+5]]+"-"+c[s[n+6]]+c[s[n+7]]+"-"+c[s[n+8]]+c[s[n+9]]+"-"+c[s[n+10]]+c[s[n+11]]+c[s[n+12]]+c[s[n+13]]+c[s[n+14]]+c[s[n+15]]).toLowerCase()}let k;const W=new Uint8Array(16);function X(){if(!k){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");k=crypto.getRandomValues.bind(crypto)}return k(W)}const Y=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),C={randomUUID:Y};function q(s,n,o){if(C.randomUUID&&!s)return C.randomUUID();s=s||{};const a=s.random??s.rng?.()??X();if(a.length<16)throw new Error("Random bytes length must be >= 16");return a[6]=a[6]&15|64,a[8]=a[8]&63|128,V(a)}const $=({x:s,y:n,value:o,highlight:a,inserted:p,removed:m,onRemove:g})=>{const x=u.useRef();return u.useEffect(()=>{p&&I.fromTo(x.current,{scale:0,opacity:0},{scale:1,opacity:1,duration:.5,ease:"back.out(1.7)"})},[p]),u.useEffect(()=>{a&&I.timeline().to(x.current,{fill:"#f00",duration:1.7}).to(x.current,{fill:"#81baffff",duration:1.5})},[a]),u.useEffect(()=>{m&&I.to(x.current,{scale:0,opacity:0,duration:1,ease:"power1.out",onComplete:g})},[m,g]),e.jsxs("g",{children:[e.jsx("circle",{ref:x,cx:s,cy:n,r:20,fill:"#81baffff",stroke:"#3498db",strokeWidth:1,style:{transformOrigin:`${s}px ${n}px`}}),e.jsx("text",{x:s,y:n+5,textAnchor:"middle",fontSize:"14",fill:"#fff",fontWeight:"bold",pointerEvents:"none",children:o})]})},L=()=>{const[s,n]=u.useState(""),o=u.useRef(null),[a,p]=u.useState([]),[m,g]=u.useState(null),[x,v]=u.useState([]),[U,y]=u.useState([]),[O,N]=u.useState([]),D=r=>({value:r,left:null,right:null}),T=(r,t)=>r?(t<r.value?r.left=T(r.left,t):t>r.value&&(r.right=T(r.right,t)),r):D(t),A=r=>{for(;r&&r.left;)r=r.left;return r},b=(r,t)=>{if(!r)return null;if(t<r.value)r.left=b(r.left,t);else if(t>r.value)r.right=b(r.right,t);else{if(!r.left&&!r.right)return null;if(!r.left)return r.right;if(!r.right)return r.left;const d=A(r.right);r.value=d.value,r.right=b(r.right,d.value)}return r},S=(r,t=0,d=50,j=750,l=[],i=null)=>{if(!r)return l;const h=(d+j)/2,f=80+t*80;return l.push({id:r.value.toString(),value:r.value,x:h,y:f,parentX:i?.x,parentY:i?.y}),S(r.left,t+1,d,h,l,{x:h,y:f}),S(r.right,t+1,h,j,l,{x:h,y:f}),l},w=(r,t)=>{const j=S(o.current).map(l=>({id:a.find(h=>h.value===l.value)?.id||q(),value:l.value,x:l.x,y:l.y,parentX:l.parentX,parentY:l.parentY,inserted:l.value===r,removed:!1}));if(t!=null){const l=a.find(i=>i.value===t);l&&j.push({...l,removed:!0})}p(j)},E=()=>{const r=parseInt(s);isNaN(r)||(o.current=T(o.current,r),w(r,null),n(""))},P=()=>{const r=parseInt(s);isNaN(r)||(o.current=b(o.current,r),w(null,r),n(""))},B=r=>{p(t=>t.filter(d=>d.id!==r)),w(null,null)},R=async r=>{if(!o.current)return;const t=[],d={inorder:i=>{i&&(d.inorder(i.left),t.push(i.value),d.inorder(i.right))},preorder:i=>{i&&(t.push(i.value),d.preorder(i.left),d.preorder(i.right))},postorder:i=>{i&&(d.postorder(i.left),d.postorder(i.right),t.push(i.value))}};d[r](o.current),r==="inorder"&&v([]),r==="preorder"&&y([]),r==="postorder"&&N([]);const j=[...a],l=[];for(let i of t){const h=j.find(f=>f.value===i);h&&(g(h.id),l.push(i),r==="inorder"&&v([...l]),r==="preorder"&&y([...l]),r==="postorder"&&N([...l]),await new Promise(f=>setTimeout(f,2e3)))}g(null)};return e.jsxs("section",{children:[e.jsxs("div",{children:[e.jsxs("h6",{className:"Tree-heading",tabIndex:"-1",children:["Tree ",e.jsx("span",{children:" Visualizer"})]})," "]}),e.jsx("div",{className:"Tree-input",children:e.jsx("input",{type:"number",value:s,onChange:r=>n(r.target.value),placeholder:"Enter a number"})}),e.jsxs("div",{className:"Tree-button",children:[e.jsx("button",{onClick:E,className:"Tree-btn",children:"Insert"}),e.jsx("button",{onClick:P,className:"Tree-btn",children:"Delete"}),e.jsx("button",{onClick:()=>{o.current=null,p([]),g(null),v([]),y([]),N([])},className:"Tree-btn",children:"Reset"}),e.jsx("button",{onClick:()=>R("inorder"),className:"Tree-btn",children:"Inorder"}),e.jsx("button",{onClick:()=>R("preorder"),className:"Tree-btn",children:"Preorder"}),e.jsx("button",{onClick:()=>R("postorder"),className:"Tree-btn",children:"Postorder"})]}),e.jsxs("svg",{width:"100%",height:"500",className:"Tree-canvas",children:[a.map(r=>r.parentX!=null&&e.jsx("line",{x1:r.parentX,y1:r.parentY,x2:r.x,y2:r.y,stroke:"#555",strokeWidth:"2"},`l-${r.id}`)),a.map(r=>e.jsx($,{x:r.x,y:r.y,value:r.value,highlight:r.id===m,inserted:r.inserted,removed:r.removed,onRemove:()=>B(r.id)},r.id))]}),e.jsxs("div",{className:"Tree-traverse-results",children:[e.jsx("h2",{children:"Traversal Outputs"}),e.jsxs("p",{children:[e.jsx("strong",{children:"Inorder:"})," ",x.join(" -> ")]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Preorder:"})," ",U.join(" -> ")]}),e.jsxs("p",{children:[e.jsx("strong",{children:"Postorder:"})," ",O.join(" -> ")]})]}),e.jsxs("div",{className:"bst-info-container",children:[e.jsxs("h2",{children:["About ",e.jsx("span",{id:"sp",children:"Binary Search Tree (BST)"})]}),e.jsxs("div",{className:"bst-section",children:[e.jsx("h3",{children:"Definition:"}),e.jsxs("p",{children:["A ",e.jsx("strong",{children:"Binary Search Tree"})," is a binary tree data structure in which each node has at most two children, and for every node:",e.jsx("br",{}),"  • All values in its left subtree are"," ",e.jsx("strong",{children:"less than"})," the node’s value.",e.jsx("br",{}),"  • All values in its right subtree are"," ",e.jsx("strong",{children:"greater than"})," the node’s value."]})]}),e.jsxs("div",{className:"bst-section",children:[e.jsx("h3",{children:"Basic Operations:"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"insert(x)"})," – Insert element ",e.jsx("code",{children:"x"})," at the correct position"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"delete(x)"})," – Remove element ",e.jsx("code",{children:"x"}),", rebalancing subtrees"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"search(x)"})," – Returns node containing"," ",e.jsx("code",{children:"x"})," or ",e.jsx("code",{children:"null"})]}),e.jsxs("li",{children:[e.jsx("strong",{children:"traverse()"})," – Walk the tree in-order, pre-order, or post-order"]})]})]}),e.jsxs("div",{className:"bst-section",children:[e.jsx("h3",{children:"Time Complexities:"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("strong",{children:"Search:"})," O(h) average, O(n) worst-case"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Insert:"})," O(h) average, O(n) worst-case"]}),e.jsxs("li",{children:[e.jsx("strong",{children:"Delete:"})," O(h) average, O(n) worst-case"]}),e.jsxs("li",{children:["where ",e.jsx("code",{children:"h"})," is the height of the tree"]})]})]}),e.jsxs("div",{className:"bst-section",children:[e.jsx("h3",{children:"Advantages:"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Allows fast lookup, insertion, and deletion when balanced"}),e.jsx("li",{children:"In-order traversal produces sorted order of elements"}),e.jsx("li",{children:"Can be extended to self-balancing trees (AVL, Red-Black)"})]})]}),e.jsxs("div",{className:"bst-section",children:[e.jsx("h3",{children:"Disadvantages:"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Performance degrades to O(n) if the tree becomes skewed"}),e.jsx("li",{children:"Requires extra logic or rotations to stay balanced"}),e.jsx("li",{children:"Storage overhead for child pointers"})]})]}),e.jsxs("div",{className:"bst-section",children:[e.jsx("h3",{children:"Memory Usage:"}),e.jsxs("p",{children:[e.jsx("strong",{children:"Space Complexity:"})," O(n) for storing ",e.jsx("code",{children:"n"})," ","nodes"]})]})]})]})};export{L as default};
